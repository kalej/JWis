/*
 * Copyright (c) 2009, Swiss AviationSoftware Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of the Swiss AviationSoftware Ltd. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package net.sf.jcgm.image.loader.cgm;

import static net.sf.jcgm.core.MIMETypes.CGM_MIME_Types;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.util.Map;

import javax.imageio.stream.ImageInputStream;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.xmlgraphics.image.loader.Image;
import org.apache.xmlgraphics.image.loader.ImageFlavor;
import org.apache.xmlgraphics.image.loader.ImageInfo;
import org.apache.xmlgraphics.image.loader.ImageSessionContext;
import org.apache.xmlgraphics.image.loader.impl.AbstractImageLoader;
import org.apache.xmlgraphics.image.loader.impl.ImageGraphics2D;
import org.apache.xmlgraphics.java2d.Graphics2DImagePainter;

import net.sf.jcgm.core.CGM;
import net.sf.jcgm.core.CGMDisplay;
import net.sf.jcgm.core.Message;

/**
 * Implementation of an image loader for CGM files. The flavor we support here
 * is {@link ImageFlavor#GRAPHICS2D} which allows us to draw the CGM file as
 * vector graphics into the PDF file generated by FOP.
 * 
 * @author xphc (Philippe Cad√©)
 * @version $Id: ImageLoaderCGM.java 3 2009-10-16 08:51:15Z phica $
 * @since Apr 14, 2009
 * @see CGM
 * @see PreloaderCGM
 * @see <a href="http://xmlgraphics.apache.org/">xmlgraphics.apache.org</a>
 */
public class ImageLoaderCGM extends AbstractImageLoader {
	
    /** logging instance */
    protected static Log log = LogFactory.getLog("net.sf.jcgm.image.loader.cgm.ImageLoaderCGM");
	
	private final ImageFlavor targetFlavor;

	public ImageLoaderCGM(ImageFlavor targetFlavor) {
		this.targetFlavor = targetFlavor;
		if (!(ImageFlavor.GRAPHICS2D.equals(targetFlavor))) {
            throw new IllegalArgumentException("Unsupported target ImageFlavor: " + targetFlavor);
		}
		
	}

	@Override
	public ImageFlavor getTargetFlavor() {
		return this.targetFlavor;
	}

	@Override
	public Image loadImage(final ImageInfo info, Map hints, ImageSessionContext session)
			throws IOException {
		
		for (String mime: CGM_MIME_Types) {
			if (!mime.equals(info.getMimeType())) {
	            throw new IllegalArgumentException("ImageInfo must be from an CGM image");
			}
		}
		
		// the input stream is set in the pre-loader
		Object inputStreamObject = info.getCustomObjects().get("InputStream");
		if (!(inputStreamObject instanceof ImageInputStream)) {
            throw new IllegalArgumentException("couldn't get ImageInputStream");
		}
		
		final CGM cgm = new CGM();
		ImageInputStream imageInputStream = (ImageInputStream)inputStreamObject;
		cgm.read(imageInputStream);
		imageInputStream.close();
		
		final CGMDisplay display = new CGMDisplay(cgm);
		
		// publish the error messages to the logger
		for (Message m: cgm.getMessages()) {
			log.warn(info.getOriginalURI()+ " " + m);
		}
		
		return new ImageGraphics2D(info, new Graphics2DImagePainter() {
			@Override
			public Dimension getImageSize() {
				return info.getSize().getDimensionMpt();
			}

			@Override
			public void paint(Graphics2D g2d, Rectangle2D area) {
				display.scale(g2d, (int)area.getWidth(), (int)area.getHeight());
				display.paint(g2d);
			}
		});
	}
}
